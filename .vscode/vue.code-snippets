{
  "<script> export default": {
    "prefix": "<script",
    "body": [
      "<script>",
      "export default {",
      "  $0",
      "}",
      "</script>"
    ],
    "description": "Script Options API",
    "scope": "vue"
  },
  "Crea rápidamente una página de Añadir vacía": {
    "prefix": "ozelot:create",
    "body": [
      "<template>",
      "  <div class=\"card card-flush datatable\">",
      "",
      "    <div class=\"card-header\">",
      "      <h2 class=\"card-title\">Crear ${1:todo}</h2>",
      "      <div class=\"card-toolbar\">",
      "        <router-link to=\"index\" class=\"btn btn-flex btn-light\">Regresar</router-link>",
      "        <button @click.prevent=\"create()\" class=\"btn btn-flex btn-primary\">Crear</button>",
      "      </div>",
      "    </div>",
      "",
      "    <div class=\"card-body\">",
      "      <form class=\"row mb-4 g-9\">",
      "        <input type=\"hidden\" v-model=\"${1:todo}.id\" />",
      "        <div class=\"col-sm-6\">",
      "          <label class=\"required form-label\">Título</label>",
      "          <input type=\"text\" v-model=\"${1:todo}.title1\" class=\"form-control form-control-solid\" placeholder=\"Temporal\" />",
      "          <div class=\"invalid-feedback\"> {{ v$.${1:todo}.title1.$$errors[0]?.$$message }} </div>",
      "        </div>",
      "        <div class=\"col-sm-6\">",
      "          <label class=\"required form-label\">Título</label>",
      "          <input type=\"text\" v-model=\"${1:todo}.title2\" class=\"form-control form-control-solid\" placeholder=\"Temporal\" />",
      "          <div class=\"invalid-feedback\"> {{ v$.${1:todo}.title2.$$errors[0]?.$$message }} </div>",
      "        </div>",
      "      </form>",
      "    </div>",
      "",
      "  </div>",
      "</template>",
      "",
      "<script>",
      "import { useVuelidate } from '@vuelidate/core'",
      "import { required } from '@vuelidate/validators'",
      "",
      "export default {",
      "  setup: () => ({ v$: useVuelidate() }),",
      "  data() {",
      "    return {",
      "      ${1:todo}: {",
      "        id: 0,",
      "        title1: \"\",",
      "        title2: \"\"",
      "      },",
      "    }",
      "  },",
      "  validations() {",
      "    return {",
      "      ${1:todo}: {",
      "        title1: { required },",
      "        title2: { required },",
      "      },",
      "    }",
      "  },",
      "  methods: {",
      "    async create() {",
      "      const valid = await this.v$.$$validate()",
      "      if (!valid) return",
      "      const block = new KTBlockUI(this.$$el)",
      "      await axios.post(\"${1:todo}s\", this.${1:todo})",
      "      await swal.fire(\"Success\", \"${1:todo} agregado con éxito\", \"success\")",
      "      block.releaseDestroy()",
      "      this.$$router.push(\"index\")",
      "    }",
      "  }",
      "}",
      "</script>"
    ],
    "description": "Crea rápidamente una página de Añadir vacía",
    "scope": "vue"
  },
  "Crea rápidamente una página de Edición vacía": {
    "prefix": "ozelot:update",
    "body": [
      "<template>",
      "  <div class=\"card card-flush datatable\">",
      "",
      "    <div class=\"card-header\">",
      "      <h2 class=\"card-title\">Actualizar ${1:todo}</h2>",
      "      <div class=\"card-toolbar\">",
      "        <router-link to=\"..index\" class=\"btn btn-flex btn-light\">Regresar</router-link>",
      "        <button @click.prevent=\"update()\" class=\"btn btn-flex btn-primary\">Actualizar</button>",
      "      </div>",
      "    </div>",
      "",
      "    <div class=\"card-body\">",
      "      <form class=\"row mb-4 g-9\">",
      "        <input type=\"hidden\" v-model=\"${1:todo}.id\" />",
      "        <div class=\"col-sm-6\">",
      "          <label class=\"required form-label\">Título</label>",
      "          <input type=\"text\" v-model=\"${1:todo}.title1\" class=\"form-control form-control-solid\" placeholder=\"Temporal\" />",
      "          <div class=\"invalid-feedback\"> {{ v$.${1:todo}.title1.$$errors[0]?.$$message }} </div>",
      "        </div>",
      "        <div class=\"col-sm-6\">",
      "          <label class=\"required form-label\">Título</label>",
      "          <input type=\"text\" v-model=\"${1:todo}.title2\" class=\"form-control form-control-solid\" placeholder=\"Temporal\" />",
      "          <div class=\"invalid-feedback\"> {{ v$.${1:todo}.title2.$$errors[0]?.$$message }} </div>",
      "        </div>",
      "      </form>",
      "    </div>",
      "",
      "  </div>",
      "</template>",
      "",
      "<script>",
      "import { useVuelidate } from '@vuelidate/core'",
      "import { required } from '@vuelidate/validators'",
      "",
      "export default {",
      "  setup: () => ({ v$: useVuelidate() }),",
      "  data() {",
      "    return {",
      "      ${1:todo}: {",
      "        id: 0,",
      "        title1: \"\",",
      "        title2: \"\"",
      "      },",
      "    }",
      "  },",
      "  validations() {",
      "    return {",
      "      ${1:todo}: {",
      "        title1: { required },",
      "        title2: { required },",
      "      },",
      "    }",
      "  },",
      "  async beforeRouteEnter(to, from, next) {",
      "    const result = await axios.get(`${1:todo}s/${to.params.id}`)",
      "    next(vm => { vm.${1:todo} = result.data })",
      "  },",
      "  methods: {",
      "    async update() {",
      "      const valid = await this.v$.$$validate()",
      "      if (!valid) return",
      "      const block = new KTBlockUI(this.$$el)",
      "      await axios.put(`${1:todo}s/${this.${1:todo}.id}`, this.${1:todo})",
      "      await swal.fire(\"Success\", \"${1:todo} actualizado con éxito\", \"success\")",
      "      block.releaseDestroy()",
      "      this.$$router.push(\"../index\")",
      "    }",
      "  }",
      "}",
      "</script>"
    ],
    "description": "Crea rápidamente una página de Edición vacía",
    "scope": "vue"
  },
  "Crea rápidamente una página de Inicio vacía": {
    "prefix": "ozelot:index",
    "body": [
      "<template>",
      "  <div class=\"card card-flush datatable\">",
      "",
      "    <div class=\"card-header\">",
      "      <h2 class=\"card-title\">${1:todo}s</h2>",
      "      <div class=\"card-toolbar\">",
      "        <router-link to=\"create\" class=\"btn btn-flex btn-primary\">Agregar ${1:todo}</router-link>",
      "      </div>",
      "    </div>",
      "",
      "    <div class=\"card-body\">",
      "      <vue-datatable :watchData=\"lista\" class=\"table table-row-dashed dt-custom\">",
      "        <thead>",
      "          <tr>",
      "            <th>Id</th>",
      "            <th>Título1</th>",
      "            <th>Título2</th>",
      "            <th>Acciones</th>",
      "          </tr>",
      "        </thead>",
      "        <tbody>",
      "          <tr v-for=\"${1:todo} in lista\" :key=\"${1:todo}.id\">",
      "            <th>{{ ${1:todo}.id }}</th>",
      "            <th>{{ ${1:todo}.title1 }}</th>",
      "            <th>{{ ${1:todo}.title2 }}</th>",
      "            <th>",
      "              <div class=\"dropdown\">",
      "                <button class=\"btn btn-secondary btn-sm dropdown-toggle\" type=\"button\" data-bs-toggle=\"dropdown\">",
      "                  Acciones",
      "                </button>",
      "                <ul class=\"dropdown-menu\">",
      "                  <li><router-link :to=\"'update/' + ${1:todo}.id\" class=\"dropdown-item\">Editar</router-link></li>",
      "                  <li><button @click=\"$$globalDelete('${1:todo}s', ${1:todo}.id, '${1:todo}')\" class=\"dropdown-item\">Eliminar</button></li>",
      "                </ul>",
      "              </div>",
      "            </th>",
      "          </tr>",
      "        </tbody>",
      "      </vue-datatable>",
      "    </div>",
      "",
      "  </div>",
      "</template>",
      "",
      "<script>",
      "export default {",
      "  data() {",
      "    return {",
      "      lista: []",
      "    }",
      "  },",
      "  async beforeRouteEnter(to, from, next) {",
      "    const result = await axios.get(\"${1:todo}s\")",
      "    next(vm => { vm.lista = result.data })",
      "  }",
      "}",
      "</script>"
    ],
    "description": "Crea rápidamente una página de Inicio vacía",
    "scope": "vue"
  },
  "Crea rápidamente una página de Inicio vacía para modales": {
    "prefix": "ozelot:indexmodal",
    "body": [
      "<template>",
      "  <div class=\"card card-flush datatable\">",
      "",
      "    <div class=\"card-header\">",
      "      <h2 class=\"card-title\">${1:todo}s</h2>",
      "      <div class=\"card-toolbar\">",
      "        <button class=\"btn btn-flex btn-primary\" data-bs-toggle=\"modal\" data-bs-target=\"#create\">Agregar ${1:todo}</button>",
      "      </div>",
      "    </div>",
      "",
      "    <div class=\"card-body\">",
      "      <vue-datatable :watchData=\"lista\" class=\"table table-row-dashed dt-custom\">",
      "        <thead>",
      "          <tr>",
      "            <th>Id</th>",
      "            <th>Título1</th>",
      "            <th>Título2</th>",
      "            <th>Acciones</th>",
      "          </tr>",
      "        </thead>",
      "        <tbody>",
      "          <tr v-for=\"${1:todo} in lista\" :key=\"${1:todo}.id\">",
      "            <th>{{ ${1:todo}.id }}</th>",
      "            <th>{{ ${1:todo}.title1 }}</th>",
      "            <th>{{ ${1:todo}.title2 }}</th>",
      "            <th>",
      "              <div class=\"dropdown\">",
      "                <button class=\"btn btn-secondary btn-sm dropdown-toggle\" type=\"button\" data-bs-toggle=\"dropdown\">",
      "                  Acciones",
      "                </button>",
      "                <ul class=\"dropdown-menu\">",
      "                  <li><button class=\"dropdown-item\" @click=\"$$refs.update.openModal(${1:todo}.id)\">Editar</button></li>",
      "                  <li><button @click=\"$$globalDelete('${1:todo}s', ${1:todo}.id, '${1:todo}')\" class=\"dropdown-item\">Eliminar</button></li>",
      "                </ul>",
      "              </div>",
      "            </th>",
      "          </tr>",
      "        </tbody>",
      "      </vue-datatable>",
      "    </div>",
      "",
      "    <div class=\"modal fade\" tabindex=\"-1\" id=\"create\">",
      "      <div class=\"modal-dialog modal-lg\"><Create @refresh=\"refresh()\"/></div>",
      "    </div>",
      "",
      "    <div class=\"modal fade\" tabindex=\"-1\">",
      "      <div class=\"modal-dialog modal-lg\"><Update @refresh=\"refresh()\" ref=\"update\"/></div>",
      "    </div>",
      "",
      "  </div>",
      "</template>",
      "",
      "<script>",
      "export default {",
      "  data() {",
      "    return {",
      "      lista: []",
      "    }",
      "  },",
      "  components: {",
      "    Create: () => import(\"./_Create.vue\"),",
      "    Update: () => import(\"./_Update.vue\")",
      "  },",
      "  methods:{",
      "    async refresh(){",
      "      const result = await axios.get(\"${1:todo}s\")",
      "      this.lista = result.data",
      "    }",
      "  },",
      "  async beforeRouteEnter(to, from, next) {",
      "    const result = await axios.get(\"${1:todo}s\")",
      "    next(vm => { vm.lista = result.data })",
      "  }",
      "}",
      "</script>"
    ],
    "description": "Crea rápidamente una página de Inicio vacía para modales",
    "scope": "vue"
  },
  "Crea rápidamente una página de Añadir vacía para modales": {
    "prefix": "ozelot:createmodal",
    "body": [
      "<template>",
      "  <div class=\"modal-content\">",
      "",
      "    <div class=\"modal-header\">",
      "      <h3 class=\"modal-title\">Crear ${1:todo}</h3>",
      "      <button class=\"btn-close btn btn-icon btn-sm btn-active-light-primary me-0\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>",
      "    </div>",
      "",
      "    <div class=\"modal-body\">",
      "      <form class=\"row mb-3 g-9\">",
      "        <input type=\"hidden\" v-model=\"${1:todo}.id\" />",
      "        <div class=\"col-sm-12\">",
      "          <label class=\"required form-label\">Título</label>",
      "          <input type=\"text\" v-model=\"${1:todo}.title1\" class=\"form-control form-control-solid\" placeholder=\"Temporal\" />",
      "          <div class=\"invalid-feedback\"> {{ v$.${1:todo}.title1.$$errors[0]?.$$message }} </div>",
      "        </div>",
      "        <div class=\"col-sm-12\">",
      "          <label class=\"required form-label\">Título</label>",
      "          <input type=\"text\" v-model=\"${1:todo}.title2\" class=\"form-control form-control-solid\" placeholder=\"Temporal\" />",
      "          <div class=\"invalid-feedback\"> {{ v$.${1:todo}.title2.$$errors[0]?.$$message }} </div>",
      "        </div>",
      "      </form>",
      "    </div>",
      "    ",
      "    <div class=\"modal-footer\">",
      "      <button type=\"button\" class=\"btn btn-light\" data-bs-dismiss=\"modal\">Cancelar</button>",
      "      <button @click=\"create()\" type=\"button\" class=\"btn btn-primary\">Crear</button>",
      "    </div>",
      "  </div>",
      "</template>",
      "",
      "<script>",
      "import { useVuelidate } from '@vuelidate/core'",
      "import { required } from '@vuelidate/validators'",
      "import { Modal } from \"bootstrap\"",
      "",
      "export default {",
      "  setup: () => ({ v$: useVuelidate() }),",
      "  data() {",
      "    return {",
      "      ${1:todo}: {",
      "        id: 0,",
      "        title1: \"\",",
      "        title2: \"\"",
      "      },",
      "    }",
      "  },",
      "  validations() {",
      "    return {",
      "      ${1:todo}: {",
      "        title1: { required },",
      "        title2: { required },",
      "      },",
      "    }",
      "  },",
      "  methods: {",
      "    async create() {",
      "      const valid = await this.v$.$$validate()",
      "      if (!valid) return",
      "      const block = new KTBlockUI(this.$$el)",
      "      await axios.post(\"${1:todo}s\", this.${1:todo})",
      "      await swal.fire(\"Success\", \"${1:todo} agregado con éxito\", \"success\")",
      "      block.releaseDestroy()",
      "      this.$$emit(\"refresh\")",
      "      Modal.getInstance(this.$$el.parentElement.parentElement).hide()",
      "    },",
      "    resetModal() {",
      "      Object.assign(this.$$data, this.$$options.data())",
      "      this.v$.$$reset()",
      "    }",
      "  },",
      "  mounted() {",
      "    const modal = this.$$el.parentElement.parentElement",
      "    modal.addEventListener('hidden.bs.modal', () => this.resetModal())",
      "  },",
      "}",
      "</script>"
    ],
    "description": "Crea rápidamente una página de Añadir vacía para modales",
    "scope": "vue"
  },
  "Crea rápidamente una página de Edición vacía para modales": {
    "prefix": "ozelot:updatemodal",
    "body": [
      "<template>",
      "  <div class=\"modal-content\">",
      "",
      "    <div class=\"modal-header\">",
      "      <h3 class=\"modal-title\">Actualizar ${1:todo}</h3>",
      "      <button class=\"btn-close btn btn-icon btn-sm btn-active-light-primary me-0\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>",
      "    </div>",
      "",
      "    <div class=\"modal-body\">",
      "      <form class=\"row mb-3 g-9\">",
      "        <input type=\"hidden\" v-model=\"${1:todo}.id\" />",
      "        <div class=\"col-sm-12\">",
      "          <label class=\"required form-label\">Título</label>",
      "          <input type=\"text\" v-model=\"${1:todo}.title1\" class=\"form-control form-control-solid\" placeholder=\"Temporal\" />",
      "          <div class=\"invalid-feedback\"> {{ v$.${1:todo}.title1.$$errors[0]?.$$message }} </div>",
      "        </div>",
      "        <div class=\"col-sm-12\">",
      "          <label class=\"required form-label\">Título</label>",
      "          <input type=\"text\" v-model=\"${1:todo}.title2\" class=\"form-control form-control-solid\" placeholder=\"Temporal\" />",
      "          <div class=\"invalid-feedback\"> {{ v$.${1:todo}.title2.$$errors[0]?.$$message }} </div>",
      "        </div>",
      "      </form>",
      "    </div>",
      "",
      "    <div class=\"modal-footer\">",
      "      <button type=\"button\" class=\"btn btn-light\" data-bs-dismiss=\"modal\">Cancelar</button>",
      "      <button @click=\"update()\" type=\"button\" class=\"btn btn-primary\">Actualizar</button>",
      "    </div>",
      "  </div>",
      "</template>",
      "",
      "<script>",
      "import { useVuelidate } from '@vuelidate/core'",
      "import { required } from '@vuelidate/validators'",
      "import { Modal } from \"bootstrap\"",
      "",
      "export default {",
      "  setup: () => ({ v$: useVuelidate() }),",
      "  data() {",
      "    return {",
      "      ${1:todo}: {",
      "        id: 0,",
      "        title1: \"\",",
      "        title2: \"\"",
      "      },",
      "    }",
      "  },",
      "  validations() {",
      "    return {",
      "      ${1:todo}: {",
      "        title1: { required },",
      "        title2: { required },",
      "      },",
      "    }",
      "  },",
      "  methods: {",
      "    async update() {",
      "      const valid = await this.v$.$$validate()",
      "      if (!valid) return",
      "      const block = new KTBlockUI(this.$$el)",
      "      await axios.put(`${1:todo}s/${this.${1:todo}.id}`, this.${1:todo})",
      "      await swal.fire(\"Success\", \"${1:todo} actualizado con éxito\", \"success\")",
      "      block.releaseDestroy()",
      "      this.$$emit(\"refresh\")",
      "      Modal.getInstance(this.$$el.parentElement.parentElement).hide()",
      "    },",
      "    resetModal() {",
      "      Object.assign(this.$$data, this.$$options.data())",
      "      this.v$.$$reset()",
      "    },",
      "    async openModal(id){",
      "      const result = await axios.get(`${1:todo}s/\\${id\\}`)",
      "      this.${1:todo} = result.data",
      "      Modal.getOrCreateInstance(this.$$el.parentElement.parentElement).show()",
      "    }",
      "  },",
      "  mounted() {",
      "    const modal = this.$$el.parentElement.parentElement",
      "    modal.addEventListener('hidden.bs.modal', () => this.resetModal())",
      "  },",
      "}",
      "</script>"
    ],
    "description": "Crea rápidamente una página de Edición vacía para modales",
    "scope": "vue"
  }
}